# Generated by Django 3.2.12 on 2022-05-26 13:15

import app.utils.paths
import app.utils.user
import bootstrap.utils
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0004_trace_resolved'),
    ]

    operations = [
        migrations.CreateModel(
            name='Battle',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('room_id', models.CharField(db_index=True, max_length=40)),
                (
                    'player_1_ticket',
                    models.CharField(
                        blank=True, db_index=True, max_length=40, null=True
                    ),
                ),
                (
                    'player_2_ticket',
                    models.CharField(
                        blank=True, db_index=True, max_length=40, null=True
                    ),
                ),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('battle_start', models.DateTimeField(blank=True, null=True)),
                ('battle_end', models.DateTimeField(blank=True, null=True)),
                (
                    'battle_end_type',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('player_killed', 'player_killed'),
                            ('player_disconnected', 'player_disconnected'),
                        ],
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    'state',
                    models.CharField(
                        choices=[
                            ('CREATED', 'created'),
                            ('JOINED', 'joined'),
                            ('CLOSED', 'closed'),
                            ('ACTIVE', 'active'),
                            ('COMPLETED', 'completed'),
                            ('DISCARDED', 'discarded'),
                        ],
                        db_index=True,
                        default='CREATED',
                        max_length=16,
                    ),
                ),
                ('turn', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Battle',
                'verbose_name_plural': 'Battles',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='BattlePlayer',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('idx', models.IntegerField(choices=[(1, 'One'), (2, 'Two')])),
                ('health', models.IntegerField(default=30)),
                (
                    'battle',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='players',
                        to='app.battle',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'custom_id',
                    models.CharField(
                        db_index=True, default='0', max_length=64, verbose_name='ID'
                    ),
                ),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=128)),
                ('by_artist', models.CharField(blank=True, max_length=64, null=True)),
                (
                    'rarity',
                    models.CharField(
                        choices=[
                            ('common', 'Common'),
                            ('rare', 'Rare'),
                            ('epic', 'Epic'),
                            ('legendary', 'Legendary'),
                        ],
                        default='common',
                        max_length=32,
                    ),
                ),
                (
                    'approval',
                    models.CharField(
                        choices=[
                            ('in_progress', 'In-progress'),
                            ('not_approved', 'Not approved'),
                            ('completed', 'Completed'),
                        ],
                        default='in_progress',
                        max_length=32,
                    ),
                ),
                (
                    'description',
                    models.TextField(
                        blank=True,
                        help_text='You can provide keywords, list:<br><br>Last Breath, Warcry, Insult, Barrier, Invisible, Pounce, Ensnare, Ensnared, Destroy, MIA, Mummy, Untouchable, Apocalype, Vampire, Censor, Aqua, Dig, Burn, Shock, Mystery, Lethal, Apocalypse, Earth, Water, Fire, Electric, Electricity, Upgrade, Leech, Censored, Warcries, Mysteries, Water Upgrade, Earth Upgrade, Electricity Upgrade, Fire Upgrade',
                        max_length=512,
                        null=True,
                    ),
                ),
                ('hp', models.IntegerField(blank=True, default=0, null=True)),
                (
                    'type',
                    models.CharField(
                        choices=[
                            ('serf', 'Serf'),
                            ('spell', 'Spell'),
                            ('mystery', 'Mystery'),
                        ],
                        default='serf',
                        max_length=32,
                    ),
                ),
                ('attack', models.IntegerField(blank=True, default=0, null=True)),
                (
                    'element',
                    models.CharField(
                        choices=[
                            ('neutral', 'Neutral'),
                            ('water', 'Water'),
                            ('fire', 'Fire'),
                            ('earth', 'Earth'),
                            ('electric', 'Electric'),
                        ],
                        default='neutral',
                        max_length=32,
                    ),
                ),
                (
                    'nft_card_type',
                    models.CharField(
                        choices=[('non_nft', 'Non-NFT'), ('nft', 'NFT')],
                        default='non_nft',
                        max_length=32,
                    ),
                ),
                (
                    'original_illustration',
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=app.utils.paths.get_card_image_path,
                    ),
                ),
                (
                    'regular_edition_illustration',
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=app.utils.paths.get_card_regular_image_frame_path,
                    ),
                ),
                (
                    'shiny_edition_illustration',
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=app.utils.paths.get_card_shiny_image_frame_path,
                    ),
                ),
                (
                    'script_on_appear',
                    models.TextField(
                        blank=True,
                        help_text='<span style="color: crimson">To script map actions, you need to write a sequence of actions with code using entities that will be passed when the script is called to the global state </span><br><br><span style="color: darkgreen">Base entity: </span><br><br>Player (Action initiator) <br>Enemy (Opponent)<br><br><span style="color: darkgreen">Base childhood: </span><br><br>Deck <br>Hand <br>Tiles <br><br><span style="color: darkgreen">Deck, Hand, Tiles childhood: </span><br><br>Card',
                    ),
                ),
                (
                    'script_on_disappear',
                    models.TextField(
                        blank=True,
                        help_text='<span style="color: crimson">To script map actions, you need to write a sequence of actions with code using entities that will be passed when the script is called to the global state </span><br><br><span style="color: darkgreen">Base entity: </span><br><br>Player (Action initiator) <br>Enemy (Opponent)<br><br><span style="color: darkgreen">Base childhood: </span><br><br>Deck <br>Hand <br>Tiles <br><br><span style="color: darkgreen">Deck, Hand, Tiles childhood: </span><br><br>Card',
                    ),
                ),
                (
                    'script_on_period',
                    models.TextField(
                        blank=True,
                        help_text='<span style="color: crimson">To script map actions, you need to write a sequence of actions with code using entities that will be passed when the script is called to the global state </span><br><br><span style="color: darkgreen">Base entity: </span><br><br>Player (Action initiator) <br>Enemy (Opponent)<br><br><span style="color: darkgreen">Base childhood: </span><br><br>Deck <br>Hand <br>Tiles <br><br><span style="color: darkgreen">Deck, Hand, Tiles childhood: </span><br><br>Card',
                    ),
                ),
                (
                    'script_on_trigger',
                    models.TextField(
                        blank=True,
                        help_text='<span style="color: crimson">To script map actions, you need to write a sequence of actions with code using entities that will be passed when the script is called to the global state </span><br><br><span style="color: darkgreen">Base entity: </span><br><br>Player (Action initiator) <br>Enemy (Opponent)<br><br><span style="color: darkgreen">Base childhood: </span><br><br>Deck <br>Hand <br>Tiles <br><br><span style="color: darkgreen">Deck, Hand, Tiles childhood: </span><br><br>Card',
                    ),
                ),
                ('is_published', models.BooleanField(default=False)),
            ],
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.CreateModel(
            name='CardSeries',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=64)),
            ],
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.CreateModel(
            name='CardSubtype',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=64)),
            ],
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.CreateModel(
            name='CustomDeck',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=128)),
                ('order', models.IntegerField(default=0)),
                ('is_selected', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('order',),
            },
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.CreateModel(
            name='Minion',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=128)),
                ('attack', models.IntegerField()),
                ('health', models.IntegerField()),
                (
                    'minion_image',
                    models.FileField(upload_to=app.utils.paths.get_minion_image_path),
                ),
            ],
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.CreateModel(
            name='NFTGenerator',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'bodies_count',
                    models.IntegerField(
                        blank=True,
                        default=1,
                        validators=[
                            django.core.validators.MaxValueValidator(9696),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    'avatars_count',
                    models.IntegerField(
                        blank=True,
                        default=1,
                        validators=[
                            django.core.validators.MaxValueValidator(9696),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                ('cards_count', models.PositiveIntegerField(blank=True, default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'avatar',
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                (
                    'user',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='player',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('online', 'Online'),
                            ('offline', 'Offline'),
                            ('away', 'Away'),
                        ],
                        default='offline',
                        max_length=50,
                    ),
                ),
                ('last_activity', models.DateTimeField(auto_now=True)),
                (
                    'player_id',
                    models.CharField(
                        default=app.utils.user.generate_random_player_id, max_length=16
                    ),
                ),
                ('num_avatars_owned', models.IntegerField(default=0)),
                ('num_bods_owned', models.IntegerField(default=0)),
                ('num_cards_owned', models.IntegerField(default=0)),
                (
                    'pfp_avatar_image_url',
                    models.CharField(blank=True, max_length=512, null=True),
                ),
            ],
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.CreateModel(
            name='PreAssembledDeck',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=128)),
                ('order', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Pre-assembled Deck',
                'verbose_name_plural': 'Pre-assembled Decks',
                'ordering': ('order',),
            },
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.CreateModel(
            name='Tile',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('hp', models.IntegerField(default=0)),
                ('attack', models.IntegerField(default=0)),
                ('order', models.IntegerField()),
                ('element', models.CharField(default='NEUTRAL', max_length=32)),
                (
                    'state',
                    models.TextField(
                        choices=[
                            ('FREE', 'free'),
                            ('ASLEEP', 'asleep'),
                            ('ACTIVE', 'active'),
                            ('USED', 'used'),
                            ('LOCKED', 'locked'),
                        ],
                        default='FREE',
                    ),
                ),
                (
                    'card',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tile',
                        to='app.card',
                    ),
                ),
                (
                    'player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tile',
                        to='app.battleplayer',
                    ),
                ),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreAssembledDeckToCard',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'involved_in_auto_gathering',
                    models.BooleanField(
                        default=True,
                        help_text='Card involved in auto generate custom deck to fresh user',
                    ),
                ),
                ('order', models.IntegerField(default=0)),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='card_to_pre_assembled_deck',
                        to='app.card',
                    ),
                ),
                (
                    'pre_assembled_deck',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='pre_assembled_deck_to_card',
                        to='app.preassembleddeck',
                    ),
                ),
            ],
            options={
                'ordering': ('order',),
            },
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.AddField(
            model_name='preassembleddeck',
            name='cards',
            field=models.ManyToManyField(
                through='app.PreAssembledDeckToCard', to='app.Card'
            ),
        ),
        migrations.CreateModel(
            name='PlayerCard',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('quantity', models.IntegerField(default=1)),
                (
                    'edition',
                    models.CharField(
                        max_length=50,
                        verbose_name=(('regular', 'Regular'), ('shiny', 'Shiny')),
                    ),
                ),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='app.card'
                    ),
                ),
                (
                    'player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='player_cards',
                        to='app.player',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='EventHistory',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                (
                    'event_source',
                    models.CharField(
                        choices=[
                            ('player1', 'player1'),
                            ('player2', 'player2'),
                            ('server', 'server'),
                        ],
                        db_index=True,
                        max_length=16,
                    ),
                ),
                (
                    'event_destination',
                    models.CharField(
                        choices=[
                            ('player1', 'player1'),
                            ('player2', 'player2'),
                            ('both', 'both'),
                            ('none', 'none'),
                        ],
                        db_index=True,
                        max_length=16,
                    ),
                ),
                (
                    'event_type',
                    models.CharField(
                        choices=[
                            ('select_deck', 'select_deck'),
                            ('player_connected', 'player_connected'),
                            ('battle_start', 'battle_start'),
                            ('draw_cards', 'draw_cards'),
                            ('start_turn', 'start_turn'),
                            ('play_card', 'play_card'),
                            ('minion_attack', 'minion_attack'),
                            ('minion_damage', 'minion_damage'),
                            ('player_attack', 'player_attack'),
                            ('player_damage', 'player_damage'),
                            ('player_destroy', 'player_destroy'),
                            ('end_turn', 'end_turn'),
                            ('end_battle', 'end_battle'),
                            ('opponent_disconnected', 'opponent_disconnected'),
                            ('battle_state_change', 'battle_state_change'),
                        ],
                        db_index=True,
                        max_length=32,
                    ),
                ),
                ('event_raw_message', models.TextField()),
                (
                    'battle',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='event_history',
                        to='app.battle',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Event History',
                'verbose_name_plural': 'Event Histories',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='CustomDeckToCard',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('order', models.IntegerField(null=True)),
                ('is_played', models.BooleanField(default=False)),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='card_to_custom_deck',
                        to='app.card',
                    ),
                ),
                (
                    'deck',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='custom_deck_to_card',
                        to='app.customdeck',
                    ),
                ),
            ],
            options={
                'ordering': ('order',),
            },
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.AddField(
            model_name='customdeck',
            name='cards',
            field=models.ManyToManyField(through='app.CustomDeckToCard', to='app.Card'),
        ),
        migrations.AddField(
            model_name='customdeck',
            name='player',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='custom_decks',
                to='app.player',
            ),
        ),
        migrations.CreateModel(
            name='CardRelationShip',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'card_type',
                    models.CharField(
                        choices=[
                            ('serf', 'Serf'),
                            ('spell', 'Spell'),
                            ('mystery', 'Mystery'),
                        ],
                        default='serf',
                        max_length=32,
                    ),
                ),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='card_relationship',
                        to='app.card',
                    ),
                ),
                (
                    'cards_exclude',
                    models.ManyToManyField(
                        help_text='Exclude specific cards from type relationship',
                        to='app.Card',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Card relationship',
                'verbose_name_plural': 'Cards relationships',
            },
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.CreateModel(
            name='CardAction',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'action_type',
                    models.CharField(
                        choices=[('spawn_minion', 'spawn_minion'), ('spell', 'spell')],
                        default='spawn_minion',
                        max_length=16,
                    ),
                ),
                ('order', models.IntegerField()),
                ('spell_name', models.CharField(blank=True, max_length=64, null=True)),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='card_actions',
                        to='app.card',
                    ),
                ),
                (
                    'minion',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='app.minion',
                    ),
                ),
            ],
            bases=(models.Model, bootstrap.utils.BootstrapMixin),
        ),
        migrations.AddField(
            model_name='card',
            name='card_series',
            field=models.ManyToManyField(blank=True, to='app.CardSeries'),
        ),
        migrations.AddField(
            model_name='card',
            name='subtypes',
            field=models.ManyToManyField(blank=True, to='app.CardSubtype'),
        ),
        migrations.AddField(
            model_name='battleplayer',
            name='player',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='battle_players',
                to='app.player',
            ),
        ),
        migrations.AddField(
            model_name='battle',
            name='winner',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='app.player',
            ),
        ),
        migrations.AlterField(
            model_name='card',
            name='description',
            field=models.TextField(
                blank=True,
                help_text='You can provide keywords, list:<br><br>',
                max_length=512,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name='battle',
            name='state',
            field=models.CharField(
                choices=[
                    ('CREATED', 'created'),
                    ('JOINED', 'joined'),
                    ('CLOSED', 'closed'),
                    ('ACTIVE', 'active'),
                    ('COMPLETED', 'completed'),
                    ('DISCARDED', 'discarded'),
                    ('AWAITING_RECONNECT', 'awaiting_reconnect'),
                ],
                db_index=True,
                default='CREATED',
                max_length=32,
            ),
        ),
        migrations.AlterField(
            model_name='card',
            name='description',
            field=models.TextField(
                blank=True,
                help_text='You can provide keywords, list:<br><br>Last Breath, Warcry, Insult, Barrier, Invisible, Pounce, Ensnare, Ensnared, MIA, Mummy, Untouchable, Apocalype, Censor, Aqua, Dig, Burn, Shock, Mystery, Lethal, Apocalypse, Leech, Censored, Warcries, Mysteries, Water Upgrade, Earth Upgrade, Electricity Upgrade, Fire Upgrade',
                max_length=512,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='card',
            name='spell_targeting_type',
            field=models.CharField(
                blank=True,
                choices=[
                    ('only_opponent_creatures', 'Only Opponent Creatures'),
                    ('only_opponent_mysteries', 'Only Opponent Mysteries'),
                    ('only_opponent_spells', 'Only Opponent Spells'),
                    ('only_opponent_all_cards', 'Only Opponent All Cards'),
                    ('only_opponent_avatar', 'Only Opponent Avatar'),
                    ('only_opponent_everything', 'Only Opponent Everything'),
                    ('only_player_creatures', 'Only Player Creatures'),
                    ('only_player_mysteries', 'Only Player Mysteries'),
                    ('only_player_spells', 'Only Player Spells'),
                    ('only_player_all_cards', 'Only Player All Cards'),
                    ('only_player_avatar', 'Only Player Avatar'),
                    ('only_player_everything', 'Only Player Everything'),
                    ('both_player_creatures', 'Both Player Creatures'),
                    ('both_player_mysteries', 'Both Player Mysteries'),
                    ('both_player_spells', 'Both Player Spells'),
                    ('both_player_all_cards', 'Both Player All Cards'),
                    ('both_player_avatars', 'Both Player Avatars'),
                    ('both_player_everything', 'Both Player Everything'),
                ],
                max_length=64,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='card',
            name='spell_type',
            field=models.CharField(
                blank=True,
                choices=[('regular', 'Regular'), ('target', 'Target')],
                max_length=64,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='battle',
            name='first_turn_idx',
            field=models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=1),
        ),
        migrations.AddField(
            model_name='battle',
            name='turn_number',
            field=models.IntegerField(default=1, verbose_name='Battle turn number'),
        ),
        migrations.RenameField(
            model_name='battleplayer',
            old_name='health',
            new_name='hp',
        ),
        migrations.AddField(
            model_name='battleplayer',
            name='hp_limit',
            field=models.IntegerField(default=30),
        ),
        migrations.CreateModel(
            name='CardHistory',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                (
                    'battle',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='battle_cards_history',
                        to='app.battle',
                    ),
                ),
                (
                    'battle_player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='cards_history',
                        to='app.battleplayer',
                    ),
                ),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='app.card'
                    ),
                ),
            ],
            options={
                'verbose_name': 'Card History',
                'verbose_name_plural': 'Cards History',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='WhitelistWallet',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('wallet', models.CharField(max_length=1024)),
            ],
        ),
        migrations.AddField(
            model_name='customdeck',
            name='is_generated',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='CardActiveMystery',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('hp', models.IntegerField(default=0)),
                ('attack', models.IntegerField(default=0)),
                ('order', models.IntegerField()),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='active_mystery',
                        to='app.card',
                    ),
                ),
                (
                    'player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='active_mystery',
                        to='app.battleplayer',
                    ),
                ),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CardDeck',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('hp', models.IntegerField(default=0)),
                ('attack', models.IntegerField(default=0)),
                ('order', models.IntegerField()),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='deck',
                        to='app.card',
                    ),
                ),
                (
                    'player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='deck',
                        to='app.battleplayer',
                    ),
                ),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CardGraveyard',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('hp', models.IntegerField(default=0)),
                ('attack', models.IntegerField(default=0)),
                ('order', models.IntegerField()),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='graveyard',
                        to='app.card',
                    ),
                ),
                (
                    'player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='graveyard',
                        to='app.battleplayer',
                    ),
                ),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CardHand',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('hp', models.IntegerField(default=0)),
                ('attack', models.IntegerField(default=0)),
                ('order', models.IntegerField()),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='hand',
                        to='app.card',
                    ),
                ),
                (
                    'player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='hand',
                        to='app.battleplayer',
                    ),
                ),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Control',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('hp', models.IntegerField(default=0)),
                ('attack', models.IntegerField(default=0)),
                ('order', models.IntegerField()),
                ('turns', models.PositiveIntegerField(default=0)),
                ('is_infinite', models.BooleanField(default=False)),
                (
                    'card',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='control',
                        to='app.card',
                    ),
                ),
                (
                    'player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='control',
                        to='app.battleplayer',
                    ),
                ),
                (
                    'tile',
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tile',
                        to='app.tile',
                    ),
                ),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='card',
            name='creature_targeting_type',
            field=models.CharField(
                choices=[('non_target', 'Non-target'), ('target', 'Target')],
                default='non_target',
                max_length=32,
            ),
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('requested', 'Requested'),
                            ('received', 'Received'),
                            ('accepted', 'Accepted'),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    'friend',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='app.player'
                    ),
                ),
                (
                    'player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='player_friends',
                        to='app.player',
                    ),
                ),
            ],
            options={
                'unique_together': set(),
            },
        ),
        migrations.CreateModel(
            name='Enchantment',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('turns', models.PositiveIntegerField(blank=True, null=True)),
                (
                    'keyword',
                    models.CharField(
                        choices=[
                            ('warcry', 'Warcry'),
                            ('censor', 'Censor'),
                            ('leech', 'Leech'),
                            ('insult', 'Insult'),
                            ('pounce', 'Pounce'),
                            ('barrier', 'Barrier'),
                            ('untouchable', 'Untouchable'),
                            ('mummy', 'Mummy'),
                            ('ensnare', 'Ensnare'),
                            ('mia', 'MIA'),
                            ('tile_buff', 'Tile Buff'),
                        ],
                        default='warcry',
                        max_length=100,
                    ),
                ),
                (
                    'type',
                    models.CharField(
                        choices=[('buff', 'buff'), ('debuff', 'debuff')],
                        default='buff',
                        max_length=16,
                    ),
                ),
                ('affects_hp', models.BooleanField(default=False)),
                ('affects_attack', models.BooleanField(default=False)),
                ('hp_change_value', models.IntegerField(blank=True, null=True)),
                ('attack_change_value', models.IntegerField(blank=True, null=True)),
                (
                    'card_hand',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='enchantments',
                        to='app.cardhand',
                    ),
                ),
                (
                    'tile',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='enchantments',
                        to='app.tile',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='BattleLog',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                (
                    'event_type',
                    models.CharField(
                        choices=[
                            ('client_event', 'client_event'),
                            ('server_event', 'server_event'),
                        ],
                        default='client_event',
                        max_length=32,
                    ),
                ),
                ('event_json', models.JSONField()),
                (
                    'battle',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to='app.battle'
                    ),
                ),
                (
                    'battle_player',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to='app.battleplayer',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Battle Log',
                'verbose_name_plural': 'Battle Logs',
                'ordering': ('timestamp',),
            },
        ),
    ]
